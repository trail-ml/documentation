{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Introduction","text":"<p>Trail automates the documentation of the Machine Learning development process, while bringing more transparency to your ML experiments. Start by using MLflow to track experiments and follow the steps in getting started or quickstart.</p>"},{"location":"#features","title":"Features","text":"<p>trail comes with three main functionalities:</p> <ol> <li>AI Registry: trail allows you to register your models and their use cases in a central place. This allows you to easily keep track of your AI use cases.</li> <li>Experiment tracking: trail tracks your experiments and their results in a tree structure. This allows you to easily compare different experiments, their evaluations and results.</li> <li>Documentation-Engine: trail creates automated documentations based on all the ML Metadata in a central place. This allows you to easily share your results with your colleagues or external parties without the overhead.</li> </ol> <p>For the full functionality, go through all three steps. What you need before getting started:</p>"},{"location":"#trail-app","title":"Trail app","text":"<p>You can access the trail app here and login with your credentials. If you don't have credentials yet, request early access on the website.</p>"},{"location":"#python-package","title":"Python Package","text":"<p>You can find the trail python package on pypi.</p>"},{"location":"AI_Registry/","title":"AI-Registry","text":"<p>To register a new use case, you need to create a new project in the webapp.  Simply press the big \"+\" button on the project overview page and provide the according information.</p> <p>To start your first experiments, follow the steps in Experiment Management.</p>"},{"location":"Documentation_Engine/","title":"The Documentation Engine","text":"<p>The documentation engine is the core of trail. It creates automated documentations based on all the ML Metadata in a central place. This allows you to easily share your results with your colleagues or external parties without the overhead. You can find the \"Documentation\" page in the navbar of the webapp.</p> <p>Keep in mind that the documentation engine relies on the data that was tracked within the ML experiments (see Experiment Management).</p> <p>The first view shows you all previously generated documentations. You can either open them or create a new one.</p> <p>To create a Documentation follow these steps: </p> <ul> <li>The \"+\" button opens a new documentation. Here you can choose the project and the experiment you want to document. You can also choose the template of the documentation.</li> <li>In the documentation view you can edit the layout by clicking on the tool button and add new ones by clicking on the \"+\" button.</li> <li>To organize your documentation choose as many of the components from the side bar as you like. You can choose from predefined components on the top or customizable components at the bottom. </li> </ul> <p>To include also text information you can use the google docs integration the settings page.</p>"},{"location":"Experiment_Management/","title":"Experiment Management","text":""},{"location":"Experiment_Management/#introduction","title":"Introduction","text":"<p>trail work with the open source experiment tracker MLFlow. Don't worry if you have never worked with MLflow the necessary basics are explained in the next section.  For a more thourough read we recommend the official documentation as a good starting point.</p>"},{"location":"Experiment_Management/#before-the-first-experiment","title":"Before the first experiment","text":"<p>Go to the webapp and create a new project (see AI Registry for more information).</p> <p>Run two commands in your CLI:</p> <ol> <li><code>pip install trailml</code></li> <li><code>trail init</code></li> </ol> <p>The trail helper will guide you through the process of creating your config file, which will look like this:</p> <p><pre><code>username: &lt;YOUR_USERNAME&gt;\npassword: &lt;YOUR_PASSWORD&gt;\nprojects:\n  id: 1234ABC\n  parentExperimentId: ABCD123\n</code></pre> You can find the <code>\u00ecd</code> in the web app experiment view in the top left after you have created a new project in the project view, and selected that project in the top right of the experiment view:</p> <p></p> <p>The <code>parentExperimentId</code> can be found in bottom ot the root-node or the bottom-right of any other node. Depending on which node you choose as a parent node, the new experiment will be a child of that node.</p> <p></p> <p>The <code>parentID</code> will get updated automatically after every run. You only have to update the <code>parentID</code> if you want to open up a new branch in the tree. E.g. if you want to start a new branch from the root node, you have to update the <code>parentID</code> to the root node ID.</p> <p>Alternatively you can create a <code>trailconfig.yaml</code> file manually and fill in your <code>username</code> and <code>password</code> and update the <code>id</code> and <code>parentExperimentId</code> as described above.</p>"},{"location":"Experiment_Management/#how-to-prepare-your-code","title":"How to prepare your code","text":"<ol> <li> <p>Import mlflow and trail <pre><code>import mlflow\nfrom trail import Trail\n</code></pre></p> </li> <li> <p>Start a run and wrap your code with the trail context manager.  <pre><code>with mlflow.start_run() as run:\n    with Trail() as trail:\n      ...your training code...\n</code></pre></p> </li> </ol> <p>Now every metric, parameter and artifact that you logged with mlflow will be tracked in the trail app.</p>"},{"location":"Experiment_Management/#available-functions","title":"Available functions","text":"<p>If you want to add further information to an experiment you can do so by adding one of the following methods to the trail context manager:</p>"},{"location":"Experiment_Management/#add-new-experiment-from-cli","title":"Add new experiment from CLI","text":"<pre><code>trail add-new-experiment\n</code></pre>"},{"location":"Experiment_Management/#how-to-log-parameters-metrics","title":"How to log parameters &amp; metrics","text":"<p>mlflow provides autologging functionality for the following libraries:</p> <ul> <li>scikit-learn</li> <li>Keras</li> <li>Gluon</li> <li>XGBoost</li> <li>LightGBM</li> <li>statsmodels</li> <li>Spark</li> <li>fastai</li> <li>PyTorch</li> </ul> <p>Autologging can be enabled by calling <code>mlflow.autolog()</code> before the training code and it captures all available parameters, metrics and metadata.</p> <p>If you want to log parameters and metrics manually, you can do so by using the following functions:</p> <ul> <li>log a metric: <pre><code>mlflow.log_metric('metric_name', metric_value)\n</code></pre></li> <li>log a parameter: <pre><code>mlflow.log_param('param_name', param_value)\n</code></pre></li> </ul>"},{"location":"Experiment_Management/#how-to-log-artifacts","title":"How to log artifacts","text":"<p>You can choose either of the following methods to log artifacts:</p> <ul> <li> <p>log an artifact with mlflow: <pre><code>mlflow.log_artifact(\"file_name\")\n</code></pre></p> </li> <li> <p>log an artifact with trail: <pre><code>trail.put_artifact('path/to/artifact', \"name\", \"tag\")\n</code></pre></p> </li> </ul>"},{"location":"Experiment_Management/#how-to-log-source-code","title":"How to log source code","text":"<ul> <li>log folder from python</li> </ul> <pre><code>trail.upload_folder(local_folder_path: str, expiration_seconds=300)\n</code></pre> <ul> <li>log folder from CLI</li> </ul> <pre><code>trail --upload-folder folder_directory\n</code></pre> <ul> <li>log file from CLI</li> </ul> <p><pre><code>trail --upload-file file_name\n</code></pre> - log jupyer-notebook with artifacts</p> <pre><code>trail --upload-notebook-artifact file_name\n</code></pre>"},{"location":"Experiment_Management/#how-to-log-dataset-statistics-from-pandas-dataframes","title":"How to log dataset statistics from pandas dataframes","text":"<ul> <li>add a dataset statistic <pre><code>from ydata_profiling import ProfileReport\nPROFILE_PATH = \"./path/to/train_data_report.html\"\n# train_data is a pandas dataframe where your data is stored\nprofile = ProfileReport(train_data, title=\"train_data Profiling Report\")\nprofile.to_file(PROFILE_PATH)\ntrail.put_artifact(PROFILE_PATH, \"name\", \"tag\")\n</code></pre></li> </ul>"},{"location":"Experiment_Management/#further-logging-functions","title":"Further logging functions","text":"<ul> <li>add a hypothesis: <pre><code>trail.put_hypothesis(\"Try to improve the accuracy by adding more layers to the model\")\n</code></pre></li> </ul>"},{"location":"MLflow/","title":"MLflow","text":"<p>An extensive documentation of MLflow can be found here. The necessary/basic commands are also referenced in Getting started and Quickstart.</p>"},{"location":"Quickstart/","title":"Quickstart","text":"<p>Under this link you can find a repository with a dummy project. To get started you need to login to the webapp, login with your credentials and create a new project. Then you can copy the project id and the parent experiment id into the config file and you are ready to go.</p> <p>If you clone the repo and experiment with different data processing steps or paramater values you'll see the visual experimentation flow in the webapp. Don't forget to change the parentID if you want to open up a new branch. The main training is shown below, for the full code, visit the github repo. <pre><code>    with mlflow.start_run():\n        with Trail(\"myProjectAlias\") as trail:\n            trail.put_hypothesis(\"Baseline\")\n            trail.put_artifact(PROFILE_PATH, \"Train Data Profile\", \"data\")\n\n            lr = ElasticNet(alpha=alpha, l1_ratio=l1_ratio, random_state=42)\n            lr.fit(train_x, train_y)\n\n            predicted_qualities = lr.predict(test_x)\n\n            (rmse, mae, r2) = eval_metrics(test_y, predicted_qualities)\n\n            print(\"Elasticnet model (alpha={:f}, l1_ratio={:f}):\".format(alpha, l1_ratio))\n            print(\"  RMSE: %s\" % rmse)\n            print(\"  MAE: %s\" % mae)\n            print(\"  R2: %s\" % r2)\n\n            mlflow.log_param(\"alpha\", alpha)\n            mlflow.log_param(\"l1_ratio\", l1_ratio)\n            mlflow.log_metric(\"rmse\", rmse)\n            mlflow.log_metric(\"r2\", r2)\n            mlflow.log_metric(\"mae\", mae)\n</code></pre></p>"}]}